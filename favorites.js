const favAPI = 'http://localhost:3001/favorites';
const cartAPI = 'http://localhost:3001/cart';
const favDiv = document.getElementById('favorites');

// ===== –ü—Ä–µ–ª–æ–∞–¥–µ—Ä =====
window.addEventListener('load', () => {
  const p = document.getElementById('preloader');
  if (p) setTimeout(() => p.setAttribute('hidden', ''), 250); // –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
});

let currentUser = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
  const userData = localStorage.getItem('currentUser');
  if (!userData) {
    favDiv.innerHTML =
      "<p>‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <a href='login.html'>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</a></p>";
    return false;
  }
  currentUser = JSON.parse(userData);
  return true;
}

async function loadFavorites() {
  if (!checkAuth()) return;

  try {
    const res = await fetch(`${favAPI}?userId=${currentUser.id}`);
    const data = await res.json();

    favDiv.innerHTML = data.length
      ? data
          .map(
            (p) => `
      <div class="card">
        <img src="${p.image}" alt="${p.title}">
        <h3>${p.title}</h3>
        <p class="price">${p.price} BYN</p>
        <div class="actions">
          <button onclick="removeFav(${p.id})" class="btn-danger">–£–¥–∞–ª–∏—Ç—å</button>
          <button onclick="addToCart(${p.productId})" class="btn">üõí –í –∫–æ—Ä–∑–∏–Ω—É</button>
        </div>
      </div>
    `
          )
          .join('')
      : '<p>‚ùå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ</p>';
  } catch (error) {
    favDiv.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ</p>';
    console.error(error);
  }
}

async function removeFav(id) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?')) return;

  try {
    await fetch(`${favAPI}/${id}`, { method: 'DELETE' });
    loadFavorites();
  } catch (error) {
    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
  }
}

async function addToCart(productId) {
  if (!currentUser) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const checkRes = await fetch(
    `${cartAPI}?userId=${currentUser.id}&productId=${productId}`
  );
  const existing = await checkRes.json();

  if (existing.length > 0) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const item = existing[0];
    await fetch(`${cartAPI}/${item.id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ quantity: item.quantity + 1 }),
    });
    alert('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ —É–≤–µ–ª–∏—á–µ–Ω–æ!');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const favRes = await fetch(
    `${favAPI}?userId=${currentUser.id}&productId=${productId}`
  );
  const favItems = await favRes.json();

  if (favItems.length === 0) return;

  const favItem = favItems[0];

  const cartItem = {
    userId: currentUser.id,
    productId: favItem.productId,
    title: favItem.title,
    price: favItem.price,
    image: favItem.image,
    quantity: 1,
    addedAt: new Date().toISOString(),
  };

  try {
    await fetch(cartAPI, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(cartItem),
    });
    alert('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!');
  } catch (error) {
    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É');
  }
}

loadFavorites();
